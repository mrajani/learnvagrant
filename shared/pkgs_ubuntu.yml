---
- name: Install Azure GPG Key
  become: yes
  apt_key:
    url: https://packages.microsoft.com/keys/microsoft.asc
    state: present

- name: Install Azure Repository
  become: yes
  apt_repository:
    update_cache: yes
    repo: deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli {{ ansible_distribution_release }} main
    state: present
    mode: '0644'
    filename: azure-cli

- name: Install deb pkg for PowerShell for Linux
  become: yes
  apt:
    deb: https://packages.microsoft.com/config/ubuntu/{{ ansible_distribution_version }}/packages-microsoft-prod.deb

- name: Install Microsoft VSCode Repository
  become: yes
  apt_repository:
    update_cache: yes
    repo: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
    state: present
    mode: '0644'
    filename: msft-vscode

- name: Installing List of Packages
  become: yes
  apt: update_cache=yes name={{ item }} state=present
  loop: '{{ packages }}'
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Download AWS CLI v2
  get_url:
    dest: '{{ ansible_env.HOME }}/awscliv2.zip'
    url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
    mode: '0600'

- name: Unzip AWS CLI v2
  unarchive:
    src: '{{ ansible_env.HOME }}/awscliv2.zip'
    dest: /tmp

- name: Install AWS CLI v2
  become: no
  shell: ./aws/install -i "{{ ansible_env.HOME }}/.local/aws-cli" -b "{{ ansible_env.HOME }}/.local/bin"
  register: result
  args:
    chdir: /tmp/
  ignore_errors: True

- name: Set TimeZone
  become: yes
  timezone:
    name: '{{ timezone }}'

- name: Install tfenv
  git:
    accept_hostkey: yes
    repo: https://github.com/tfutils/tfenv.git
    dest: '{{ ansible_env.HOME }}/.tfenv'

- name: Install GPG
  lineinfile:
    state: present
    path: '~/.tfenv/use-gpgv'
    line: 'trust-tfenv: yes'
    create: yes
    mode: '0600'

- name: Symlinks to Terraform and tfenv
  file:
    path: ~/.local/bin/{{ item }}
    src: ~/.tfenv/bin/{{ item }}
    state: link
    force: yes
  loop: ['tfenv', 'terraform']

- name: Install Terraform using tfenv
  ignore_errors: True
  shell: '~/.local/bin/tfenv install latest:^{{ tf_ver }} 2>/dev/null'
  args:
    warn: no

- name: Use Terraform
  ignore_errors: True
  shell: '~/.local/bin/tfenv use latest'
  args:
    warn: no

- name: Download Keybase
  get_url:
    dest: '{{ ansible_env.HOME }}/keybase_amd64.deb'
    url: https://prerelease.keybase.io/keybase_amd64.deb
    mode: '0600'

- name: Install Keybase
  become: yes
  apt:
    deb: '{{ ansible_env.HOME }}/keybase_amd64.deb'

- name: Install via Pip
  pip:
    name: '{{ pips }}'
    extra_args: --user

- name: Download Starfish
  get_url:
    url: https://starship.rs/install.sh
    dest: '{{ ansible_env.HOME }}/'
    mode: '0755'

- name: Install Starfish
  shell: '{{ ansible_env.HOME }}/install.sh -b {{ ansible_env.HOME }}/.local/bin -y'

- name: Init Starfish in /.bashrc'
  lineinfile:
    path: '{{ ansible_env.HOME }}/.bashrc'
    line: eval "$({{ ansible_env.HOME }}/.local/bin init bash)"
