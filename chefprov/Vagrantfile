# -*- mode: ruby -*-
# vi: set ft=ruby :

synced_folder    = "~/Documents/Git/learnvagrant/shared"

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ubuntu/precise64"

  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.128.210"
  config.vm.synced_folder synced_folder, "/vagrant_data"
  config.vm.hostname = "haproxy.iono.corp"

  config.vm.provider :virtualbox do |vbox|
    vbox.name = "haproxy"
  end

  config.vm.provision "shell" do |sh|
      # sh.path = "#{synced_folder}/provision.sh"
      sh.inline = "curl -L https://www.opscode.com/chef/install.sh | sudo bash"
  end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  config.vm.provision :file do |file|
    file.source      = "/Users/mrajani/.gitconfig"
    file.destination = "/home/vagrant/.gitconfig"
  end

  config.vm.provision :file do |file|
    file.source      = "../shared/git_rsa"
    file.destination = "/home/vagrant/.ssh/id_rsa"
  end

  config.vm.provision :file do |file|
    file.source      = "../shared/git_rsa.pub"
    file.destination = "/home/vagrant/.ssh/id_rsa.pub"
  end


  config.vm.provision "chef_solo" do |chef|
  # chef.cookbooks_path = "chef/cookbooks"
  # chef.roles_path = "chef/roles"
  # chef.data_bags_path = "chef/data_bags"
  # chef.add_role "motd"
    chef.cookbooks_path = "cookbooks"
    chef.roles_path = "roles"
    chef.data_bags_path = "data_bags"
    chef.add_role "haproxy"
    chef.add_recipe "greeting"

  #   # You may also specify custom JSON attributes:
  #   chef.json = { mysql_password: "foo" }
  end

  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
